module sineatra.WebServer;
import std.socket;
//import std.http;
import sineatra.ClassDef;

import std.thread;
import std.time;
import std.string;
import std.process;

import c.arpa.inet;

alias DEBUG_BUILD = true;

void debug(string str){
    static if(DEBUG_BUILD){
        writeln str;
    }
}

bool isSetup;
shared Path[auto~] matchedPaths;
shared Socket servSocket;
shared ThreadPool tPool;

void initSineatra(){
    initSineatra(8080);
}

void initSineatra(int port){ //Called if not already setup before get()
    matchedPaths = new Path[auto~] 4;
    tPool = new ThreadPool(17); //Server accept loop + 16 connections
    setupListener(port);
}

void listenSocket(){
    set-handler(Error e){
        char[] backtrace = read-pretty-fcc-backtrace();
        fprintf(stdout,"%.*s\n",backtrace);
        fprintf(stdout,"%.*s\n","$e");
        return;
    }
    scope clientSocket = servSocket.accept();
    (sockaddr* addr,int a) = clientSocket.boundAddr.getAddrHandle();
    char* addrStr = inet_ntoa(sockaddr_in*:addr.sin_addr); // note: not threadsafe lel
    debug(scope= "Connection incomming. IP:$(addrStr.CToString())");
    scope char[auto~] readBytes;
    scope readBuffer = new ubyte[] 512;
    int k = 0; //Bytes last read
    while(true){
        k=clientSocket.recv(readBuffer);
        debug(scope= "Read $k bytes");
        if(k==-1){
            debug("Stream ended");
            break;
        }
        auto readStr = (string:readBuffer)[0..k];
        readBytes ~= readStr;
        if(readStr.rfind("\r\n\r\n")){
            debug("Double newline!");
            break;
        }
    }
    debug(string:readBytes[]);
    scope request = new RequestProperties; //Object to keep track of the request attributes
    scope response = new ResponseBuilder(""); //Object to write the response's attributes
    request.underlayingSocket = clientSocket;
    request.url = "";
    scope string[] matches;
    string content = (string:readBytes[]);
    //slice returns null if not found, which is great for this. Even malformed packets shouldn't crash.
    string reqtype = slice(&content," "); //None inclusive <3
    string url = slice(&content," ");
    string httpReq = slice(&content,"\r\n");
    if(reqtype is null || url is null || httpReq is null){
        debug("Failed to parse HTTP request!");
        return;
    }
    request.url = url;
    debug(scope= "ReqType = $(reqtype)\nURL = $(url)\nHTTPJunk = $(httpReq)");
    while(true){
        if(string curHeader = slice(&content,"\r\n")){
            if(curHeader.length==0){
                debug("Empty line");
                break;
            }
            writeln(curHeader);
            string (curHeaderA,curHeaderB) = curHeader.slice(":");
            if(curHeaderA is null || curHeaderB is null){
                debug("Malformed header!");
                break;
            }
            if(curHeaderB[$-1]==";"){ //Can't have a 0 length string, so safe
                curHeaderB = curHeaderB[0..$-1];
            }
            request.headers ~= (curHeaderA,curHeaderB);
        }else{
            break;
        }
    }
    scope build = new ResponseBuilder("HTTP/1.1 300 OK
Content-Type: text/html; charset=UTF-8
Cache-Control: no-cache
Pragma: no-cache
Server: Sineatra
Vary: Accept-Encoding

Hello, world!");
    clientSocket.sendAll(build.final);
    clientSocket.close();
    debug("Socket has closed.");
    //sleep(2);
}

void setupListener(int port){
    TcpAddress bindTo = new TcpAddress("127.0.0.1",short:port);
    servSocket = new Socket;
    servSocket.reuse(true);
    servSocket.bind(bindTo);
    servSocket.listen();
    debug("Setting up socket!");
    tPool.addTask \(){
        while(true){
            listenSocket;
        }
    };
}

void get(string path, string delegate() onRequest){
    get(path,delegate string(RequestProperties request){ onRequest(); });
}

void get(string path, string delegate(RequestProperties request) onRequest){
    if(!isSetup){
        isSetup = true;
        initSineatra;
    }
    Path currentPath = new Path(path,onRequest);
    matchedPaths ~ currentPath;
}